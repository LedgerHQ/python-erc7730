---
name: 🔁 update submodules

on:
  schedule:
    - cron: '0 7 * * *'
  repository_dispatch:
    types: [submodules]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BRANCH: "main"

jobs:
  update_submodules:
    name: update submodules
    runs-on: public-ledgerhq-shared-small
    timeout-minutes: 60
    steps:

      - name: Checkout
        timeout-minutes: 10
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: 0
          token: ${{ secrets.CI_BOT_TOKEN }}

      - name: Checkout ${{ env.BRANCH }} branch
        timeout-minutes: 10
        run: |
          git fetch origin +refs/heads/*:refs/remotes/origin/*
          if git show-ref --quiet refs/remotes/origin/${{ env.BRANCH }}; then
            echo "${{ env.BRANCH }} branch already exists."
            git checkout ${{ env.BRANCH }}
          else
            echo "${{ env.BRANCH }} branch does not exist."
            git checkout -b ${{ env.BRANCH }}
            git push origin ${{ env.BRANCH }}
          fi

      - name: Get date
        timeout-minutes: 10
        run: echo "CURRENT_DATE=$(date +"%Y-%m-%d %H:%M")" >> $GITHUB_ENV

      - name: Update submodules
        id: submodules
        timeout-minutes: 10
        uses: sgoudham/update-git-submodules@v2.1.1

      - name: Check submodules changes
        id: changes
        timeout-minutes: 10
        shell: bash
        run: |
          git status -s
          [[ -n "$(git status -s)" ]] && echo "changes=true" >> $GITHUB_OUTPUT || true

      - name: Setup Graphviz
        timeout-minutes: 10
        uses: ts-graphviz/setup-graphviz@v2

      - name: Setup python / PDM
        if: ${{ !cancelled() && steps.changes.outputs.changes == 'true' }}
        timeout-minutes: 10
        uses: ./.github/actions/pdm

      - name: Install dependencies
        if: ${{ !cancelled() && steps.changes.outputs.changes == 'true' }}
        timeout-minutes: 10
        run: pdm install --dev --check --frozen-lockfile

      - name: Get API keys
        if: ${{ !cancelled() && steps.changes.outputs.changes == 'true' }}
        timeout-minutes: 10
        shell: bash
        run: |
          cat << EOF | jq -r 'to_entries[] | select(.key|startswith("SCAN_")) | "\(.key)=\(.value)"' >> "$GITHUB_ENV"
          ${{ toJSON(secrets) }}
          EOF

      - name: Run tests
        if: ${{ !cancelled() && steps.changes.outputs.changes == 'true' }}
        timeout-minutes: 30
        run: pdm run test

      - name: Publish test reports
        timeout-minutes: 10
        if: ${{ !cancelled() }}
        uses: pmeier/pytest-results-action@v0.7.1
        with:
          path: tests/.tests.xml
          title: Test results
          summary: true
          display-options: fEX
          fail-on-empty: false

      - name: Update succeeded | Commit and push changes
        if: ${{ !cancelled() && steps.changes.outputs.changes == 'true' && steps.update.outcome == 'success' }}
        timeout-minutes: 10
        shell: bash
        run: |
          git config --global user.name "${{ env.CI_BOT_USERNAME }}"
          git config --global user.email "${{ env.CI_BOT_USERNAME }}@users.noreply.github.com"
          git add outputs/
          git commit -a -m "chore: update submodules - ${{ env.CURRENT_DATE }}"
          git pull --rebase origin ${{ env.BRANCH }}
          git push --set-upstream origin ${{ env.BRANCH }}
        env:
          CI_BOT_USERNAME: ${{ secrets.CI_BOT_USERNAME }}

      - name: Update failed | Draft pull request
        if: ${{ !cancelled() && steps.changes.outputs.changes == 'true' && steps.update.outcome != 'success' }}
        timeout-minutes: 10
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.CI_BOT_TOKEN }}
          author: ${{ secrets.CI_BOT_USERNAME }} <${{ secrets.CI_BOT_USERNAME }}@users.noreply.github.com>
          branch: ${{ env.BRANCH }}-update-submodules
          base: ${{ env.BRANCH }}
          delete-branch: false
          add-paths: |
            inputs/*
            outputs/*
          commit-message: 'chore: update submodules - ${{ env.CURRENT_DATE }}'
          title: 'chore: update submodules - ${{ env.CURRENT_DATE }}'
          body: ${{ steps.submodules.outputs.prBody }}
          labels: assets,automerge
          draft: true
          signoff: false
